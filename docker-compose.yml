version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: qdrant_admin_redis
    ports:
      - "6379:6379"
    networks:
      - app_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: qdrant_admin_db
    environment:
      POSTGRES_DB: qdrant_admin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d qdrant_admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qdrant_admin_backend
    environment:
      DATABASE_URL: postgresql://admin:admin123@postgres:5432/qdrant_admin
      REDIS_URL: redis://redis:6379
      QDRANT_URL: ${QDRANT_URL}
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # MongoDB Configuration
      MONGODB_URL: ${MONGODB_URL}
      MONGODB_DATABASE: ${MONGODB_DATABASE:-IntelliPro}
      MONGODB_COLLECTION_CHATS: ${MONGODB_COLLECTION_CHATS:-Chats}
      MONGODB_COLLECTION_ANALYTICS: ${MONGODB_COLLECTION_ANALYTICS:-Analytics}
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: qdrant_admin_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://127.0.0.1:8000
      INTERNAL_API_URL: http://backend:8000
      DATABASE_URL: postgresql://admin:admin123@postgres:5432/qdrant_admin
      NEXTAUTH_SECRET: super-secret-key-for-development-only-change-in-production
      NEXTAUTH_URL: http://localhost:3000
      # SAML SSO Configuration
      APP_BASE_URL: http://localhost:3000
      SAML_SP_ENTITY_ID: http://localhost:3000/saml/metadata
      SAML_IDP_ENTITY_ID: "https://sts.windows.net/0d475330-4c98-4ada-8b91-00ef087d11eb/"
      SAML_IDP_SSO_URL: "https://login.microsoftonline.com/0d475330-4c98-4ada-8b91-00ef087d11eb/saml2"
      SAML_IDP_SLO_URL: "https://login.microsoftonline.com/0d475330-4c98-4ada-8b91-00ef087d11eb/saml2"
      SAML_IDP_CERT: "MIIC8DCCAdigAwIBAgIQRzFPogBy+rJNv6UqVMYtAjANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQDEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA2MDUxNTQyNDdaFw0yODA2MDUxNTQyNDdaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQgU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1U/3aDCeoau2f6sWq/EkWjdePX40L7tid7barFGccRutSJPChxyAzMVHed9IlwrJsFEkzkUMIprKJBsB0Osi4koOCEQIDVzzgu57o9Rep8gQzn8MXB3AuuIsBvJ5N6aCZ4eZVWdeAH/2vj4iQpTWlttP94w+J2i0cJxZNCYax6kzknaGxIJjwEb9DRjKfHa1n2PwWnEDleCP09l+9UXRSIfrp7wL19w4kk656VQtcU6BucKpqElP3o0mJ5uvWpzAtQbYdBE+bKa5K6xtiLElRCdEbPYSuV9OtUxmuHLjS6x5KQjWoS265hLsNStlCzrD4VEiLoVJor0oD8jKech7tQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQAF4Z5WBeezjKDYX7yqaGCbFhUGV9JLRBl4nmrvc3lk313ZH0Qo4BEtMM3RTnkhEEWv49KB9Idtd6DPpU1+LCnBYkPUfLH/KJR/yhYOvg5pq4Nl5TbjRq7yBIlFQUTYHJPczvxX9WhDzUg7+42RhghlMzGq/Dg1OGBoUQFbtPDpai8V1m+RSIdBvLgql540v1euyFTGWyYAPUQ5yH/awwcEIObZgBqQ3kdeAeyuOghTnu7EHtZnA3PhBHge22fEW+uh1oJjZElvHF8YrbnkyJlLZW5zsihRBf0p+TGefrmDwx/9UH1wBM1jSFF5JXI8fnOtP2CA3IijmLaYgHkmT12K"
      SESSION_SECRET: "h2M0qJ6//EwXH1MuOP3dKcUfMSFUexoZm4r2e6YMXpy9pB4rhqFHFzxROQvUOqMd"
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge